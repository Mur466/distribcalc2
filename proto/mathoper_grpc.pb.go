// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: proto/mathoper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MathOperService_Oper_FullMethodName        = "/mathoper.MathOperService/Oper"
	MathOperService_OperResult_FullMethodName  = "/mathoper.MathOperService/OperResult"
	MathOperService_AgentStatus_FullMethodName = "/mathoper.MathOperService/AgentStatus"
)

// MathOperServiceClient is the client API for MathOperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathOperServiceClient interface {
	// методы, которые можно будет реализовать и использовать
	Oper(ctx context.Context, in *OperRequest, opts ...grpc.CallOption) (*OperResponse, error)
	OperResult(ctx context.Context, in *OperResultRequest, opts ...grpc.CallOption) (*Empty, error)
	AgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*Empty, error)
}

type mathOperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMathOperServiceClient(cc grpc.ClientConnInterface) MathOperServiceClient {
	return &mathOperServiceClient{cc}
}

func (c *mathOperServiceClient) Oper(ctx context.Context, in *OperRequest, opts ...grpc.CallOption) (*OperResponse, error) {
	out := new(OperResponse)
	err := c.cc.Invoke(ctx, MathOperService_Oper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) OperResult(ctx context.Context, in *OperResultRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MathOperService_OperResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperServiceClient) AgentStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MathOperService_AgentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathOperServiceServer is the server API for MathOperService service.
// All implementations must embed UnimplementedMathOperServiceServer
// for forward compatibility
type MathOperServiceServer interface {
	// методы, которые можно будет реализовать и использовать
	Oper(context.Context, *OperRequest) (*OperResponse, error)
	OperResult(context.Context, *OperResultRequest) (*Empty, error)
	AgentStatus(context.Context, *AgentStatusRequest) (*Empty, error)
	mustEmbedUnimplementedMathOperServiceServer()
}

// UnimplementedMathOperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMathOperServiceServer struct {
}

func (UnimplementedMathOperServiceServer) Oper(context.Context, *OperRequest) (*OperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oper not implemented")
}
func (UnimplementedMathOperServiceServer) OperResult(context.Context, *OperResultRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperResult not implemented")
}
func (UnimplementedMathOperServiceServer) AgentStatus(context.Context, *AgentStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentStatus not implemented")
}
func (UnimplementedMathOperServiceServer) mustEmbedUnimplementedMathOperServiceServer() {}

// UnsafeMathOperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathOperServiceServer will
// result in compilation errors.
type UnsafeMathOperServiceServer interface {
	mustEmbedUnimplementedMathOperServiceServer()
}

func RegisterMathOperServiceServer(s grpc.ServiceRegistrar, srv MathOperServiceServer) {
	s.RegisterService(&MathOperService_ServiceDesc, srv)
}

func _MathOperService_Oper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).Oper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathOperService_Oper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).Oper(ctx, req.(*OperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_OperResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).OperResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathOperService_OperResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).OperResult(ctx, req.(*OperResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperService_AgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperServiceServer).AgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathOperService_AgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperServiceServer).AgentStatus(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MathOperService_ServiceDesc is the grpc.ServiceDesc for MathOperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathOperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mathoper.MathOperService",
	HandlerType: (*MathOperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Oper",
			Handler:    _MathOperService_Oper_Handler,
		},
		{
			MethodName: "OperResult",
			Handler:    _MathOperService_OperResult_Handler,
		},
		{
			MethodName: "AgentStatus",
			Handler:    _MathOperService_AgentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mathoper.proto",
}
